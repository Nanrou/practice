// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outmux1);  // 判断是A指令还是C指令，如果是C指令，则使用ALU输出的地址
    
    Not(in=instruction[15], out=nota);  // A寄存器是放地址或者数据的，如果输入是A指令，则要将其更新到A寄存器
    And(a=instruction[15], b=instruction[5], out=cloadA);  // 如果是C指令，则要判断是否要储存到A寄存器
    Or(a=nota, b=cloadA, out=outor);  // outor作为A寄存器的load位，决定是否更新A寄存器
    ARegister(in=outmux1, load=outor, out=outA, out[0..14]=addressM);
    
    And(a=instruction[15], b=instruction[12], out=cm);  // 如果是C指令，则要确定a位
    Mux16(a=outA, b=inM, sel=cm, out=outAM);
    
    And(a=instruction[15], b=instruction[4], out=cloadD);  // 如果是C指令，且要储存在D寄存器，那就更新D寄存器
    DRegister(in=outALU, load=cloadD, out=outD);
    
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
    f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);
    
    And(a=instruction[15], b=instruction[3], out=writeM);

    Or(a=zr, b=ng, out=zrorng);  // 结合ALU输出的结果去判断J位的跳转
    Not(in=zrorng, out=dayuling);
    And(a=instruction[0], b=dayuling, out=j3);
    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[2], b=ng, out=j1);
    Or8Way(in[0]=j3, in[1]=j2, in[2]=j1, in[3..7]=false, out=jjj);  // 看是否出现跳转
    And(a=instruction[15], b=jjj, out=pcload);  // 要留意前提是C指令
    
    PC(in=outA, load=pcload, reset=reset, inc=true, out[0..14]=pc);
}